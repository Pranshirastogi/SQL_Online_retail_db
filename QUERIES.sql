USE ONLINERETAILDB;
-- Query 1: Retrieve all orders for a specific customer
SELECT O.ORDERID , O.CUSTOMERID, O.ORDERDATE, O.TOTALAMOUNT, OI.PRODUCTID,
P.PRODUCTNAME, OI.QUANTITY, OI.PRICE FROM ORDERS AS O
JOIN ORDERITEMS AS OI ON O.ORDERID = OI.ORDERID
JOIN PRODUCTS AS P ON P.PRODUCTID = OI.PRODUCTID
WHERE O.CUSTOMERID = 1;

-- Query 2: Find the total sales for each product
SELECT P.PRODUCTID, P.PRODUCTNAME, SUM(OI.QUANTITY * OI.PRICE) AS TOTAL_SALES
FROM ORDERITEMS AS OI
JOIN PRODUCTS AS P ON OI.PRODUCTID = P.PRODUCTID
GROUP BY P.PRODUCTID , P.PRODUCTNAME 
ORDER BY TOTAL_SALES DESC;

-- Query 3: Calculate the average order value
SELECT AVG(TOTALAMOUNT) AS AVERAGE_ORDER_VALUE FROM ORDERS;

-- Query 4: List the top 5 customers by total spending
SELECT * FROM
(SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, SUM(TOTALAMOUNT) AS TOTALSPEND,
ROW_NUMBER() OVER (ORDER BY SUM(O.TOTALAMOUNT) DESC) AS RN FROM CUSTOMERS AS C
JOIN ORDERS AS O ON C.CUSTOMERID = O.ORDERID
GROUP BY C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME) T WHERE RN <= 5;


-- Query 5: Retrieve the most popular product category
SELECT*FROM
(SELECT C.CATEGORYID, C.CATEGORYNAME, SUM(OI.QUANTITY) AS TOTALQUANTITY,
ROW_NUMBER() OVER (ORDER BY SUM(OI.QUANTITY) DESC) AS RN
FROM ORDERITEMS OI JOIN PRODUCTS P ON OI.PRODUCTID = P.PRODUCTID
JOIN CATEGORIES C ON P.CATEGORYID  = C.CATEGORYID
GROUP BY C.CATEGORYID, C.CATEGORYNAME)
T WHERE RN =1;

-- to insert a product with zero stock
INSERT INTO PRODUCTS(PRODUCTNAME, CATEGORYID, PRICE, STOCK)
VALUES ('Keyboard',1,3.99,0);

-- Query 6: List all products that are out of stock, i.e. stock = 0
SELECT * FROM PRODUCTS WHERE STOCK = 0;
-- with category name
SELECT P.PRODUCTID, P.PRODUCTNAME, C.CATEGORYNAME, P.STOCK
FROM PRODUCTS P JOIN CATEGORIES C USING (CATEGORYID) 
WHERE STOCK = 0;

-- Query 7: Find customers who placed orders in the last 30 days
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, C.EMAIL, C.PHONE, O.ORDERDATE
FROM CUSTOMERS C JOIN ORDERS O USING (CUSTOMERID)
WHERE ORDERDATE >= DATE_SUB(NOW(), INTERVAL 30 DAY);

-- Query 8: Calculate the total number of orders placed each month
SELECT YEAR(ORDERDATE) AS OrderYear,
MONTH(ORDERDATE) AS OrderMonth,
COUNT(ORDERID) AS TotalOrders
FROM ORDERS
GROUP BY YEAR(ORDERDATE), MONTH(ORDERDATE)
ORDER BY ORDERYEAR, ORDERMONTH;

-- Query 9: Retrieve the details of the most recent order
SELECT O.ORDERID, O.ORDERDATE, O.TOTALAMOUNT, C.FIRSTNAME, C.LASTNAME
FROM ORDERS O JOIN CUSTOMERS C
USING(CUSTOMERID)
ORDER BY ORDERDATE DESC
LIMIT 1;

-- Query 10: Find the average price of products in each category
-- FYR: Query 6
-- SELECT p.ProductID, p.ProductName, c.CategoryName, p.Stock 
-- FROM Products p JOIN Categories c
-- ON p.CategoryID = c.CategoryID
-- WHERE Stock = 0;
SELECT C.CATEGORYID, C.CATEGORYNAME, AVG(P.PRICE) AS AveragePrice
FROM CATEGORIES C JOIN PRODUCTS P
USING(CATEGORYID)
GROUP BY C.CATEGORYID, C.CATEGORYNAME;

-- Query 11: List customers who have never placed an order
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, C.EMAIL, C.PHONE, O.ORDERID, O.TOTALAMOUNT 
FROM CUSTOMERS C LEFT OUTER JOIN ORDERS O 
USING (CUSTOMERID)
WHERE O.ORDERID IS NULL;
-- inserting customer info who hasn't ordered the product once
INSERT INTO CUSTOMERS(FirstName, LastName, Email, Phone, Address, City, State, ZipCode, Country)
VALUES ('Karthik', 'P.V.', 'karthikpv@example.com', '123-556-7690', '123 Elm St.', 'Springfield', 
'IL', '62701', 'USA');

-- Query 12: Retrieve the total quantity sold for each product
SELECT P.PRODUCTID, P.PRODUCTNAME, SUM(OI.QUANTITY) AS TotalQuantity
FROM PRODUCTS P JOIN ORDERITEMS OI
USING (PRODUCTID)
GROUP BY P.PRODUCTID, P.PRODUCTNAME
ORDER BY P.PRODUCTNAME;

-- Query 13: Calculate the total revenue generated from each category
SELECT C.CATEGORYID, C.CATEGORYNAME, SUM(OI.QUANTITY*OI.PRICE) AS TotalRevenue
FROM ORDERITEMS OI JOIN PRODUCTS P
USING (PRODUCTID)
JOIN CATEGORIES C 
USING (CATEGORYID)
GROUP BY C.CATEGORYID, C.CATEGORYNAME
ORDER BY TOTALREVENUE DESC;

-- Query 14: Find the highest-priced product in each category
SELECT * FROM
(SELECT C.CATEGORYID, C.CATEGORYNAME, P.PRODUCTID, P.PRODUCTNAME, P.PRICE,
RANK() OVER (PARTITION BY  C.CATEGORYNAME ORDER BY P.PRICE DESC) AS RNK
FROM CATEGORIES C JOIN PRODUCTS P
USING (CATEGORYID)) AS T
WHERE RNK =1;

-- Query 15: Retrieve orders with a total amount greater than a specific value (e.g., $500)
SELECT O.ORDERID, C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, O.TOTALAMOUNT
FROM ORDERS O JOIN CUSTOMERS C
USING (CUSTOMERID)
WHERE TOTALAMOUNT > 500
ORDER BY O.TOTALAMOUNT DESC;

-- Query 16: List products along with the number of orders they appear in
SELECT P.PRODUCTID, P.PRODUCTNAME, COUNT(OI.ORDERID) AS OrderCount
FROM PRODUCTS P JOIN ORDERITEMS OI 
USING (PRODUCTID)
GROUP BY P.PRODUCTID, P.PRODUCTNAME
ORDER BY ORDERCOUNT DESC;
-- INSERT INTO ORDERITEMS 
INSERT INTO OrderItems(OrderID, ProductID, Quantity, Price)
VALUES 
(4, 1, 5, 699.99);
INSERT INTO Orders(CustomerId, OrderDate, TotalAmount)
VALUES 
(4, NOW(), 3499.95);
SELECT 5*699.99;

-- Query 17: Find the top 3 most frequently ordered products
SELECT P.PRODUCTID, P.PRODUCTNAME, COUNT(OI.ORDERID) AS OrderCount
FROM PRODUCTS P JOIN ORDERITEMS OI 
USING (PRODUCTID)
GROUP BY P.PRODUCTID, P.PRODUCTNAME
ORDER BY ORDERCOUNT DESC
LIMIT 3;

-- Query 18: Calculate the total number of customers from each country
SELECT COUNTRY, COUNT(CUSTOMERID) AS TotalCustomers
FROM CUSTOMERS GROUP BY COUNTRY ORDER BY TOTALCUSTOMERS DESC;

-- Query 19: Retrieve the list of customers along with their total spending
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, SUM(O.TOTALAMOUNT) AS TotalSpending
FROM CUSTOMERS C JOIN ORDERS O
USING (CUSTOMERID)
GROUP BY C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME;

-- Query 20: List orders with more than a specified number of items (e.g., 5 items)
SELECT O.ORDERID, C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, COUNT(OI.ORDERITEMID) AS NumberOfItems
FROM ORDERS O JOIN ORDERITEMS OI
USING (ORDERID)
JOIN CUSTOMERS C
USING (CUSTOMERID)
GROUP BY O.ORDERID, C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME
HAVING NUMBEROFITEMS >=1
ORDER BY NUMBEROFITEMS; 


